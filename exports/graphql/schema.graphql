input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

enum ENUM_ARTICLE_TEMPLATE {
  template1
  template2
  template3
  template4
}

type Article {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Title: String!
  Content: String!
  category: Category
  edition: Edition
  articleCardImage: UploadFile
  template: ENUM_ARTICLE_TEMPLATE
  quotes: ComponentQuoteQuotes
  saibamais: String
  entrevistado: Entrevistado
  ordem: Int
  revisao: Boolean
  published_at: DateTime
  authors(sort: String, limit: Int, start: Int, where: JSON): [Author]
  Galery(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type ArticleConnection {
  values: [Article]
  groupBy: ArticleGroupBy
  aggregate: ArticleAggregator
}

type ArticleAggregator {
  count: Int
  totalCount: Int
  sum: ArticleAggregatorSum
  avg: ArticleAggregatorAvg
  min: ArticleAggregatorMin
  max: ArticleAggregatorMax
}

type ArticleAggregatorSum {
  ordem: Float
}

type ArticleAggregatorAvg {
  ordem: Float
}

type ArticleAggregatorMin {
  ordem: Float
}

type ArticleAggregatorMax {
  ordem: Float
}

type ArticleGroupBy {
  id: [ArticleConnectionId]
  created_at: [ArticleConnectionCreated_at]
  updated_at: [ArticleConnectionUpdated_at]
  Title: [ArticleConnectionTitle]
  Content: [ArticleConnectionContent]
  category: [ArticleConnectionCategory]
  edition: [ArticleConnectionEdition]
  articleCardImage: [ArticleConnectionArticleCardImage]
  template: [ArticleConnectionTemplate]
  quotes: [ArticleConnectionQuotes]
  saibamais: [ArticleConnectionSaibamais]
  entrevistado: [ArticleConnectionEntrevistado]
  ordem: [ArticleConnectionOrdem]
  revisao: [ArticleConnectionRevisao]
  published_at: [ArticleConnectionPublished_at]
}

type ArticleConnectionId {
  key: ID
  connection: ArticleConnection
}

type ArticleConnectionCreated_at {
  key: DateTime
  connection: ArticleConnection
}

type ArticleConnectionUpdated_at {
  key: DateTime
  connection: ArticleConnection
}

type ArticleConnectionTitle {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionContent {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionCategory {
  key: ID
  connection: ArticleConnection
}

type ArticleConnectionEdition {
  key: ID
  connection: ArticleConnection
}

type ArticleConnectionArticleCardImage {
  key: ID
  connection: ArticleConnection
}

type ArticleConnectionTemplate {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionQuotes {
  key: ID
  connection: ArticleConnection
}

type ArticleConnectionSaibamais {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionEntrevistado {
  key: ID
  connection: ArticleConnection
}

type ArticleConnectionOrdem {
  key: Int
  connection: ArticleConnection
}

type ArticleConnectionRevisao {
  key: Boolean
  connection: ArticleConnection
}

type ArticleConnectionPublished_at {
  key: DateTime
  connection: ArticleConnection
}

input ArticleInput {
  Title: String!
  Content: String!
  category: ID
  edition: ID
  authors: [ID]
  articleCardImage: ID
  Galery: [ID]
  template: ENUM_ARTICLE_TEMPLATE
  quotes: ComponentQuoteQuoteInput
  saibamais: String
  entrevistado: ID
  ordem: Int
  revisao: Boolean
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editArticleInput {
  Title: String
  Content: String
  category: ID
  edition: ID
  authors: [ID]
  articleCardImage: ID
  Galery: [ID]
  template: ENUM_ARTICLE_TEMPLATE
  quotes: editComponentQuoteQuoteInput
  saibamais: String
  entrevistado: ID
  ordem: Int
  revisao: Boolean
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createArticleInput {
  data: ArticleInput
}

type createArticlePayload {
  article: Article
}

input updateArticleInput {
  where: InputID
  data: editArticleInput
}

type updateArticlePayload {
  article: Article
}

input deleteArticleInput {
  where: InputID
}

type deleteArticlePayload {
  article: Article
}

type Author {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Name: String!
  bio: String
  shortbio: String
  published_at: DateTime
  Picture(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  articles(sort: String, limit: Int, start: Int, where: JSON): [Article]
}

type AuthorConnection {
  values: [Author]
  groupBy: AuthorGroupBy
  aggregate: AuthorAggregator
}

type AuthorAggregator {
  count: Int
  totalCount: Int
}

type AuthorGroupBy {
  id: [AuthorConnectionId]
  created_at: [AuthorConnectionCreated_at]
  updated_at: [AuthorConnectionUpdated_at]
  Name: [AuthorConnectionName]
  bio: [AuthorConnectionBio]
  shortbio: [AuthorConnectionShortbio]
  published_at: [AuthorConnectionPublished_at]
}

type AuthorConnectionId {
  key: ID
  connection: AuthorConnection
}

type AuthorConnectionCreated_at {
  key: DateTime
  connection: AuthorConnection
}

type AuthorConnectionUpdated_at {
  key: DateTime
  connection: AuthorConnection
}

type AuthorConnectionName {
  key: String
  connection: AuthorConnection
}

type AuthorConnectionBio {
  key: String
  connection: AuthorConnection
}

type AuthorConnectionShortbio {
  key: String
  connection: AuthorConnection
}

type AuthorConnectionPublished_at {
  key: DateTime
  connection: AuthorConnection
}

input AuthorInput {
  Name: String!
  Picture: [ID]
  bio: String
  shortbio: String
  articles: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editAuthorInput {
  Name: String
  Picture: [ID]
  bio: String
  shortbio: String
  articles: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createAuthorInput {
  data: AuthorInput
}

type createAuthorPayload {
  author: Author
}

input updateAuthorInput {
  where: InputID
  data: editAuthorInput
}

type updateAuthorPayload {
  author: Author
}

input deleteAuthorInput {
  where: InputID
}

type deleteAuthorPayload {
  author: Author
}

type Category {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Title: String!
  Class: String!
  published_at: DateTime
  articles(sort: String, limit: Int, start: Int, where: JSON): [Article]
}

type CategoryConnection {
  values: [Category]
  groupBy: CategoryGroupBy
  aggregate: CategoryAggregator
}

type CategoryAggregator {
  count: Int
  totalCount: Int
}

type CategoryGroupBy {
  id: [CategoryConnectionId]
  created_at: [CategoryConnectionCreated_at]
  updated_at: [CategoryConnectionUpdated_at]
  Title: [CategoryConnectionTitle]
  Class: [CategoryConnectionClass]
  published_at: [CategoryConnectionPublished_at]
}

type CategoryConnectionId {
  key: ID
  connection: CategoryConnection
}

type CategoryConnectionCreated_at {
  key: DateTime
  connection: CategoryConnection
}

type CategoryConnectionUpdated_at {
  key: DateTime
  connection: CategoryConnection
}

type CategoryConnectionTitle {
  key: String
  connection: CategoryConnection
}

type CategoryConnectionClass {
  key: String
  connection: CategoryConnection
}

type CategoryConnectionPublished_at {
  key: DateTime
  connection: CategoryConnection
}

input CategoryInput {
  articles: [ID]
  Title: String!
  Class: String!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editCategoryInput {
  articles: [ID]
  Title: String
  Class: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createCategoryInput {
  data: CategoryInput
}

type createCategoryPayload {
  category: Category
}

input updateCategoryInput {
  where: InputID
  data: editCategoryInput
}

type updateCategoryPayload {
  category: Category
}

input deleteCategoryInput {
  where: InputID
}

type deleteCategoryPayload {
  category: Category
}

type Colaboradorestexto {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  colaboradorestexto: String
  published_at: DateTime
}

input ColaboradorestextoInput {
  colaboradorestexto: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editColaboradorestextoInput {
  colaboradorestexto: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateColaboradorestextoInput {
  data: editColaboradorestextoInput
}

type updateColaboradorestextoPayload {
  colaboradorestexto: Colaboradorestexto
}

type deleteColaboradorestextoPayload {
  colaboradorestexto: Colaboradorestexto
}

type EdicoesTexto {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  edicoestexto: String
  published_at: DateTime
}

input EdicoesTextoInput {
  edicoestexto: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editEdicoesTextoInput {
  edicoestexto: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateEdicoesTextoInput {
  data: editEdicoesTextoInput
}

type updateEdicoesTextoPayload {
  edicoesTexto: EdicoesTexto
}

type deleteEdicoesTextoPayload {
  edicoesTexto: EdicoesTexto
}

type Edition {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Title: String
  Picture: UploadFile
  frontpage: Boolean
  pdf: UploadFile
  subTitle: String
  CartaDosEditores: String
  bannerTitle: UploadFile
  revisao: Boolean
  published_at: DateTime
  articles(sort: String, limit: Int, start: Int, where: JSON): [Article]
  GaleryHome(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  GaleryMobile(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type EditionConnection {
  values: [Edition]
  groupBy: EditionGroupBy
  aggregate: EditionAggregator
}

type EditionAggregator {
  count: Int
  totalCount: Int
}

type EditionGroupBy {
  id: [EditionConnectionId]
  created_at: [EditionConnectionCreated_at]
  updated_at: [EditionConnectionUpdated_at]
  Title: [EditionConnectionTitle]
  Picture: [EditionConnectionPicture]
  frontpage: [EditionConnectionFrontpage]
  pdf: [EditionConnectionPdf]
  subTitle: [EditionConnectionSubTitle]
  CartaDosEditores: [EditionConnectionCartaDosEditores]
  bannerTitle: [EditionConnectionBannerTitle]
  revisao: [EditionConnectionRevisao]
  published_at: [EditionConnectionPublished_at]
}

type EditionConnectionId {
  key: ID
  connection: EditionConnection
}

type EditionConnectionCreated_at {
  key: DateTime
  connection: EditionConnection
}

type EditionConnectionUpdated_at {
  key: DateTime
  connection: EditionConnection
}

type EditionConnectionTitle {
  key: String
  connection: EditionConnection
}

type EditionConnectionPicture {
  key: ID
  connection: EditionConnection
}

type EditionConnectionFrontpage {
  key: Boolean
  connection: EditionConnection
}

type EditionConnectionPdf {
  key: ID
  connection: EditionConnection
}

type EditionConnectionSubTitle {
  key: String
  connection: EditionConnection
}

type EditionConnectionCartaDosEditores {
  key: String
  connection: EditionConnection
}

type EditionConnectionBannerTitle {
  key: ID
  connection: EditionConnection
}

type EditionConnectionRevisao {
  key: Boolean
  connection: EditionConnection
}

type EditionConnectionPublished_at {
  key: DateTime
  connection: EditionConnection
}

input EditionInput {
  Title: String
  articles: [ID]
  Picture: ID
  frontpage: Boolean
  pdf: ID
  subTitle: String
  CartaDosEditores: String
  GaleryHome: [ID]
  bannerTitle: ID
  GaleryMobile: [ID]
  revisao: Boolean
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editEditionInput {
  Title: String
  articles: [ID]
  Picture: ID
  frontpage: Boolean
  pdf: ID
  subTitle: String
  CartaDosEditores: String
  GaleryHome: [ID]
  bannerTitle: ID
  GaleryMobile: [ID]
  revisao: Boolean
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createEditionInput {
  data: EditionInput
}

type createEditionPayload {
  edition: Edition
}

input updateEditionInput {
  where: InputID
  data: editEditionInput
}

type updateEditionPayload {
  edition: Edition
}

input deleteEditionInput {
  where: InputID
}

type deleteEditionPayload {
  edition: Edition
}

type Entrevistado {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Name: String
  bio: String
  shortbio: String
  active: Boolean
  published_at: DateTime
  articles(sort: String, limit: Int, start: Int, where: JSON): [Article]
  Picture(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type EntrevistadoConnection {
  values: [Entrevistado]
  groupBy: EntrevistadoGroupBy
  aggregate: EntrevistadoAggregator
}

type EntrevistadoAggregator {
  count: Int
  totalCount: Int
}

type EntrevistadoGroupBy {
  id: [EntrevistadoConnectionId]
  created_at: [EntrevistadoConnectionCreated_at]
  updated_at: [EntrevistadoConnectionUpdated_at]
  Name: [EntrevistadoConnectionName]
  bio: [EntrevistadoConnectionBio]
  shortbio: [EntrevistadoConnectionShortbio]
  active: [EntrevistadoConnectionActive]
  published_at: [EntrevistadoConnectionPublished_at]
}

type EntrevistadoConnectionId {
  key: ID
  connection: EntrevistadoConnection
}

type EntrevistadoConnectionCreated_at {
  key: DateTime
  connection: EntrevistadoConnection
}

type EntrevistadoConnectionUpdated_at {
  key: DateTime
  connection: EntrevistadoConnection
}

type EntrevistadoConnectionName {
  key: String
  connection: EntrevistadoConnection
}

type EntrevistadoConnectionBio {
  key: String
  connection: EntrevistadoConnection
}

type EntrevistadoConnectionShortbio {
  key: String
  connection: EntrevistadoConnection
}

type EntrevistadoConnectionActive {
  key: Boolean
  connection: EntrevistadoConnection
}

type EntrevistadoConnectionPublished_at {
  key: DateTime
  connection: EntrevistadoConnection
}

input EntrevistadoInput {
  Name: String
  bio: String
  articles: [ID]
  Picture: [ID]
  shortbio: String
  active: Boolean
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editEntrevistadoInput {
  Name: String
  bio: String
  articles: [ID]
  Picture: [ID]
  shortbio: String
  active: Boolean
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createEntrevistadoInput {
  data: EntrevistadoInput
}

type createEntrevistadoPayload {
  entrevistado: Entrevistado
}

input updateEntrevistadoInput {
  where: InputID
  data: editEntrevistadoInput
}

type updateEntrevistadoPayload {
  entrevistado: Entrevistado
}

input deleteEntrevistadoInput {
  where: InputID
}

type deleteEntrevistadoPayload {
  entrevistado: Entrevistado
}

type PostCarrossel {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  published_at: DateTime
  GaleryDesktop(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  GaleryMobile(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

input PostCarrosselInput {
  GaleryDesktop: [ID]
  GaleryMobile: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editPostCarrosselInput {
  GaleryDesktop: [ID]
  GaleryMobile: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updatePostCarrosselInput {
  data: editPostCarrosselInput
}

type updatePostCarrosselPayload {
  postCarrossel: PostCarrossel
}

type deletePostCarrosselPayload {
  postCarrossel: PostCarrossel
}

type SobreTexto {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Coluna1: String
  Coluna2: String
  Coluna3: String
  Maincoluna: String
  published_at: DateTime
}

input SobreTextoInput {
  Coluna1: String
  Coluna2: String
  Coluna3: String
  Maincoluna: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editSobreTextoInput {
  Coluna1: String
  Coluna2: String
  Coluna3: String
  Maincoluna: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateSobreTextoInput {
  data: editSobreTextoInput
}

type updateSobreTextoPayload {
  sobreTexto: SobreTexto
}

type deleteSobreTextoPayload {
  sobreTexto: SobreTexto
}

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type ComponentQuoteQuotes {
  id: ID!
  quote1: String
  quote2: String
  quote3: String
}

input ComponentQuoteQuoteInput {
  quote1: String
  quote2: String
  quote3: String
}

input editComponentQuoteQuoteInput {
  id: ID
  quote1: String
  quote2: String
  quote3: String
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Article | ArticleConnection | ArticleAggregator | ArticleAggregatorSum | ArticleAggregatorAvg | ArticleAggregatorMin | ArticleAggregatorMax | ArticleGroupBy | ArticleConnectionId | ArticleConnectionCreated_at | ArticleConnectionUpdated_at | ArticleConnectionTitle | ArticleConnectionContent | ArticleConnectionCategory | ArticleConnectionEdition | ArticleConnectionArticleCardImage | ArticleConnectionTemplate | ArticleConnectionQuotes | ArticleConnectionSaibamais | ArticleConnectionEntrevistado | ArticleConnectionOrdem | ArticleConnectionRevisao | ArticleConnectionPublished_at | createArticlePayload | updateArticlePayload | deleteArticlePayload | Author | AuthorConnection | AuthorAggregator | AuthorGroupBy | AuthorConnectionId | AuthorConnectionCreated_at | AuthorConnectionUpdated_at | AuthorConnectionName | AuthorConnectionBio | AuthorConnectionShortbio | AuthorConnectionPublished_at | createAuthorPayload | updateAuthorPayload | deleteAuthorPayload | Category | CategoryConnection | CategoryAggregator | CategoryGroupBy | CategoryConnectionId | CategoryConnectionCreated_at | CategoryConnectionUpdated_at | CategoryConnectionTitle | CategoryConnectionClass | CategoryConnectionPublished_at | createCategoryPayload | updateCategoryPayload | deleteCategoryPayload | Colaboradorestexto | updateColaboradorestextoPayload | deleteColaboradorestextoPayload | EdicoesTexto | updateEdicoesTextoPayload | deleteEdicoesTextoPayload | Edition | EditionConnection | EditionAggregator | EditionGroupBy | EditionConnectionId | EditionConnectionCreated_at | EditionConnectionUpdated_at | EditionConnectionTitle | EditionConnectionPicture | EditionConnectionFrontpage | EditionConnectionPdf | EditionConnectionSubTitle | EditionConnectionCartaDosEditores | EditionConnectionBannerTitle | EditionConnectionRevisao | EditionConnectionPublished_at | createEditionPayload | updateEditionPayload | deleteEditionPayload | Entrevistado | EntrevistadoConnection | EntrevistadoAggregator | EntrevistadoGroupBy | EntrevistadoConnectionId | EntrevistadoConnectionCreated_at | EntrevistadoConnectionUpdated_at | EntrevistadoConnectionName | EntrevistadoConnectionBio | EntrevistadoConnectionShortbio | EntrevistadoConnectionActive | EntrevistadoConnectionPublished_at | createEntrevistadoPayload | updateEntrevistadoPayload | deleteEntrevistadoPayload | PostCarrossel | updatePostCarrosselPayload | deletePostCarrosselPayload | SobreTexto | updateSobreTextoPayload | deleteSobreTextoPayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload | ComponentQuoteQuotes

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  article(id: ID!, publicationState: PublicationState): Article
  articles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Article]
  articlesConnection(sort: String, limit: Int, start: Int, where: JSON): ArticleConnection
  author(id: ID!, publicationState: PublicationState): Author
  authors(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Author]
  authorsConnection(sort: String, limit: Int, start: Int, where: JSON): AuthorConnection
  category(id: ID!, publicationState: PublicationState): Category
  categories(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Category]
  categoriesConnection(sort: String, limit: Int, start: Int, where: JSON): CategoryConnection
  colaboradorestexto(publicationState: PublicationState): Colaboradorestexto
  edicoesTexto(publicationState: PublicationState): EdicoesTexto
  edition(id: ID!, publicationState: PublicationState): Edition
  editions(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Edition]
  editionsConnection(sort: String, limit: Int, start: Int, where: JSON): EditionConnection
  entrevistado(id: ID!, publicationState: PublicationState): Entrevistado
  entrevistados(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Entrevistado]
  entrevistadosConnection(sort: String, limit: Int, start: Int, where: JSON): EntrevistadoConnection
  postCarrossel(publicationState: PublicationState): PostCarrossel
  sobreTexto(publicationState: PublicationState): SobreTexto
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  createArticle(input: createArticleInput): createArticlePayload
  updateArticle(input: updateArticleInput): updateArticlePayload
  deleteArticle(input: deleteArticleInput): deleteArticlePayload
  createAuthor(input: createAuthorInput): createAuthorPayload
  updateAuthor(input: updateAuthorInput): updateAuthorPayload
  deleteAuthor(input: deleteAuthorInput): deleteAuthorPayload
  createCategory(input: createCategoryInput): createCategoryPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  updateColaboradorestexto(input: updateColaboradorestextoInput): updateColaboradorestextoPayload
  deleteColaboradorestexto: deleteColaboradorestextoPayload
  updateEdicoesTexto(input: updateEdicoesTextoInput): updateEdicoesTextoPayload
  deleteEdicoesTexto: deleteEdicoesTextoPayload
  createEdition(input: createEditionInput): createEditionPayload
  updateEdition(input: updateEditionInput): updateEditionPayload
  deleteEdition(input: deleteEditionInput): deleteEditionPayload
  createEntrevistado(input: createEntrevistadoInput): createEntrevistadoPayload
  updateEntrevistado(input: updateEntrevistadoInput): updateEntrevistadoPayload
  deleteEntrevistado(input: deleteEntrevistadoInput): deleteEntrevistadoPayload
  updatePostCarrossel(input: updatePostCarrosselInput): updatePostCarrosselPayload
  deletePostCarrossel: deletePostCarrosselPayload
  updateSobreTexto(input: updateSobreTextoInput): updateSobreTextoPayload
  deleteSobreTexto: deleteSobreTextoPayload

  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
